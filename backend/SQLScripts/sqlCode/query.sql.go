// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package sqlCode

import (
	"context"
	"database/sql"
)

const clearProgramVersion = `-- name: ClearProgramVersion :exec
DELETE FROM metadata WHERE id = 2
`

func (q *Queries) ClearProgramVersion(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearProgramVersion)
	return err
}

const createContainer = `-- name: CreateContainer :one
INSERT INTO container (name, volume, unit_of_measure)
VALUES (?, ?, ?)
RETURNING id
`

type CreateContainerParams struct {
	Name          string
	Volume        int64
	UnitOfMeasure int64
}

func (q *Queries) CreateContainer(ctx context.Context, arg CreateContainerParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createContainer, arg.Name, arg.Volume, arg.UnitOfMeasure)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createIngredient = `-- name: CreateIngredient :one
INSERT INTO ingredient (name, abv, category)
VALUES (?, ?, ?)
RETURNING id
`

type CreateIngredientParams struct {
	Name     string
	Abv      sql.NullFloat64
	Category int64
}

func (q *Queries) CreateIngredient(ctx context.Context, arg CreateIngredientParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createIngredient, arg.Name, arg.Abv, arg.Category)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createIngredientCategory = `-- name: CreateIngredientCategory :one
INSERT INTO ingredient_category (name, parent_category)
VALUES (?, ?)
RETURNING id
`

type CreateIngredientCategoryParams struct {
	Name           string
	ParentCategory sql.NullInt64
}

func (q *Queries) CreateIngredientCategory(ctx context.Context, arg CreateIngredientCategoryParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createIngredientCategory, arg.Name, arg.ParentCategory)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipe (name, rating, date_created)
VALUES (?, ?, ?)
RETURNING id
`

type CreateRecipeParams struct {
	Name        string
	Rating      sql.NullInt64
	DateCreated sql.NullString
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createRecipe, arg.Name, arg.Rating, arg.DateCreated)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createRecipeItem = `-- name: CreateRecipeItem :one
INSERT INTO recipe_item (recipe_tag, content, container)
VALUES (?, ?, ?)
RETURNING id
`

type CreateRecipeItemParams struct {
	RecipeTag int64
	Content   int64
	Container sql.NullInt64
}

func (q *Queries) CreateRecipeItem(ctx context.Context, arg CreateRecipeItemParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createRecipeItem, arg.RecipeTag, arg.Content, arg.Container)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createUnitOfMeasure = `-- name: CreateUnitOfMeasure :one
INSERT INTO unit_of_measure (name)
VALUES (?)
RETURNING id
`

func (q *Queries) CreateUnitOfMeasure(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUnitOfMeasure, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getContainer = `-- name: GetContainer :one
SELECT id, name, volume, unit_of_measure FROM container
WHERE id = ? LIMIT 1
`

func (q *Queries) GetContainer(ctx context.Context, id int64) (Container, error) {
	row := q.db.QueryRowContext(ctx, getContainer, id)
	var i Container
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Volume,
		&i.UnitOfMeasure,
	)
	return i, err
}

const getIngredient = `-- name: GetIngredient :one
SELECT id, name, abv, category FROM ingredient
WHERE id = ? LIMIT 1
`

func (q *Queries) GetIngredient(ctx context.Context, id int64) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, getIngredient, id)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Abv,
		&i.Category,
	)
	return i, err
}

const getIngredientCategory = `-- name: GetIngredientCategory :one
SELECT id, name, parent_category FROM ingredient_category
WHERE id = ? LIMIT 1
`

func (q *Queries) GetIngredientCategory(ctx context.Context, id int64) (IngredientCategory, error) {
	row := q.db.QueryRowContext(ctx, getIngredientCategory, id)
	var i IngredientCategory
	err := row.Scan(&i.ID, &i.Name, &i.ParentCategory)
	return i, err
}

const getProgramVersion = `-- name: GetProgramVersion :one
SELECT major_version, minor_version, patch_version, db_version FROM metadata
WHERE id = 2 LIMIT 1
`

type GetProgramVersionRow struct {
	MajorVersion int64
	MinorVersion int64
	PatchVersion int64
	DbVersion    int64
}

func (q *Queries) GetProgramVersion(ctx context.Context) (GetProgramVersionRow, error) {
	row := q.db.QueryRowContext(ctx, getProgramVersion)
	var i GetProgramVersionRow
	err := row.Scan(
		&i.MajorVersion,
		&i.MinorVersion,
		&i.PatchVersion,
		&i.DbVersion,
	)
	return i, err
}

const getRecipe = `-- name: GetRecipe :one
SELECT id, name, rating, date_created FROM recipe
WHERE id = ? LIMIT 1
`

func (q *Queries) GetRecipe(ctx context.Context, id int64) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipe, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Rating,
		&i.DateCreated,
	)
	return i, err
}

const getRecipeItem = `-- name: GetRecipeItem :one
SELECT id, recipe_tag, content, container FROM recipe_item
WHERE id = ? LIMIT 1
`

func (q *Queries) GetRecipeItem(ctx context.Context, id int64) (RecipeItem, error) {
	row := q.db.QueryRowContext(ctx, getRecipeItem, id)
	var i RecipeItem
	err := row.Scan(
		&i.ID,
		&i.RecipeTag,
		&i.Content,
		&i.Container,
	)
	return i, err
}

const getUnitOfMeasure = `-- name: GetUnitOfMeasure :one
SELECT id, name FROM unit_of_measure
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUnitOfMeasure(ctx context.Context, id int64) (UnitOfMeasure, error) {
	row := q.db.QueryRowContext(ctx, getUnitOfMeasure, id)
	var i UnitOfMeasure
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listContainers = `-- name: ListContainers :many
SELECT id, name, volume, unit_of_measure FROM container
ORDER BY name
`

func (q *Queries) ListContainers(ctx context.Context) ([]Container, error) {
	rows, err := q.db.QueryContext(ctx, listContainers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Container
	for rows.Next() {
		var i Container
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Volume,
			&i.UnitOfMeasure,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listIngredientCategories = `-- name: ListIngredientCategories :many
SELECT id, name, parent_category FROM ingredient_category
ORDER BY name
`

func (q *Queries) ListIngredientCategories(ctx context.Context) ([]IngredientCategory, error) {
	rows, err := q.db.QueryContext(ctx, listIngredientCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IngredientCategory
	for rows.Next() {
		var i IngredientCategory
		if err := rows.Scan(&i.ID, &i.Name, &i.ParentCategory); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listIngredients = `-- name: ListIngredients :many
SELECT id, name, abv, category FROM ingredient
ORDER BY name
`

func (q *Queries) ListIngredients(ctx context.Context) ([]Ingredient, error) {
	rows, err := q.db.QueryContext(ctx, listIngredients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ingredient
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Abv,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecipeItems = `-- name: ListRecipeItems :many
SELECT id, recipe_tag, content, container FROM recipe_item
ORDER BY recipe_tag
`

func (q *Queries) ListRecipeItems(ctx context.Context) ([]RecipeItem, error) {
	rows, err := q.db.QueryContext(ctx, listRecipeItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecipeItem
	for rows.Next() {
		var i RecipeItem
		if err := rows.Scan(
			&i.ID,
			&i.RecipeTag,
			&i.Content,
			&i.Container,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecipes = `-- name: ListRecipes :many
SELECT id, name, rating, date_created FROM recipe
ORDER BY name
`

func (q *Queries) ListRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, listRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Rating,
			&i.DateCreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnitsOfMeasure = `-- name: ListUnitsOfMeasure :many
SELECT id, name FROM unit_of_measure
ORDER BY name
`

func (q *Queries) ListUnitsOfMeasure(ctx context.Context) ([]UnitOfMeasure, error) {
	rows, err := q.db.QueryContext(ctx, listUnitsOfMeasure)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnitOfMeasure
	for rows.Next() {
		var i UnitOfMeasure
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rateRecipe = `-- name: RateRecipe :exec
UPDATE recipe
SET rating = ?
WHERE id = ?
`

type RateRecipeParams struct {
	Rating sql.NullInt64
	ID     int64
}

func (q *Queries) RateRecipe(ctx context.Context, arg RateRecipeParams) error {
	_, err := q.db.ExecContext(ctx, rateRecipe, arg.Rating, arg.ID)
	return err
}

const setProgramVersion = `-- name: SetProgramVersion :exec
INSERT INTO metadata (id, major_version, minor_version, patch_version, db_version)
VALUES (
        ?, ?, ?, ?, ?
        )
`

type SetProgramVersionParams struct {
	ID           int64
	MajorVersion int64
	MinorVersion int64
	PatchVersion int64
	DbVersion    int64
}

func (q *Queries) SetProgramVersion(ctx context.Context, arg SetProgramVersionParams) error {
	_, err := q.db.ExecContext(ctx, setProgramVersion,
		arg.ID,
		arg.MajorVersion,
		arg.MinorVersion,
		arg.PatchVersion,
		arg.DbVersion,
	)
	return err
}
